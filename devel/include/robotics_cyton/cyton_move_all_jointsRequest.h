// Generated by gencpp from file robotics_cyton/cyton_move_all_jointsRequest.msg
// DO NOT EDIT!


#ifndef ROBOTICS_CYTON_MESSAGE_CYTON_MOVE_ALL_JOINTSREQUEST_H
#define ROBOTICS_CYTON_MESSAGE_CYTON_MOVE_ALL_JOINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotics_cyton
{
template <class ContainerAllocator>
struct cyton_move_all_jointsRequest_
{
  typedef cyton_move_all_jointsRequest_<ContainerAllocator> Type;

  cyton_move_all_jointsRequest_()
    : jointStates()
    , acc(0.0)
    , vel(0.0)  {
    }
  cyton_move_all_jointsRequest_(const ContainerAllocator& _alloc)
    : jointStates(_alloc)
    , acc(0.0)
    , vel(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _jointStates_type;
  _jointStates_type jointStates;

   typedef float _acc_type;
  _acc_type acc;

   typedef float _vel_type;
  _vel_type vel;





  typedef boost::shared_ptr< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct cyton_move_all_jointsRequest_

typedef ::robotics_cyton::cyton_move_all_jointsRequest_<std::allocator<void> > cyton_move_all_jointsRequest;

typedef boost::shared_ptr< ::robotics_cyton::cyton_move_all_jointsRequest > cyton_move_all_jointsRequestPtr;
typedef boost::shared_ptr< ::robotics_cyton::cyton_move_all_jointsRequest const> cyton_move_all_jointsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator1> & lhs, const ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.jointStates == rhs.jointStates &&
    lhs.acc == rhs.acc &&
    lhs.vel == rhs.vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator1> & lhs, const ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotics_cyton

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e70ab60f9bda1c235d95bce9fc54eb5";
  }

  static const char* value(const ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e70ab60f9bda1c2ULL;
  static const uint64_t static_value2 = 0x35d95bce9fc54eb5ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotics_cyton/cyton_move_all_jointsRequest";
  }

  static const char* value(const ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] jointStates\n"
"float32 acc\n"
"float32 vel\n"
"\n"
;
  }

  static const char* value(const ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.jointStates);
      stream.next(m.acc);
      stream.next(m.vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cyton_move_all_jointsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotics_cyton::cyton_move_all_jointsRequest_<ContainerAllocator>& v)
  {
    s << indent << "jointStates[]" << std::endl;
    for (size_t i = 0; i < v.jointStates.size(); ++i)
    {
      s << indent << "  jointStates[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.jointStates[i]);
    }
    s << indent << "acc: ";
    Printer<float>::stream(s, indent + "  ", v.acc);
    s << indent << "vel: ";
    Printer<float>::stream(s, indent + "  ", v.vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTICS_CYTON_MESSAGE_CYTON_MOVE_ALL_JOINTSREQUEST_H
