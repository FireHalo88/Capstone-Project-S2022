// Generated by gencpp from file robotics_cyton/cyton_enable_robotRequest.msg
// DO NOT EDIT!


#ifndef ROBOTICS_CYTON_MESSAGE_CYTON_ENABLE_ROBOTREQUEST_H
#define ROBOTICS_CYTON_MESSAGE_CYTON_ENABLE_ROBOTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotics_cyton
{
template <class ContainerAllocator>
struct cyton_enable_robotRequest_
{
  typedef cyton_enable_robotRequest_<ContainerAllocator> Type;

  cyton_enable_robotRequest_()
    : enable_robot(0)  {
    }
  cyton_enable_robotRequest_(const ContainerAllocator& _alloc)
    : enable_robot(0)  {
  (void)_alloc;
    }



   typedef int32_t _enable_robot_type;
  _enable_robot_type enable_robot;





  typedef boost::shared_ptr< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> const> ConstPtr;

}; // struct cyton_enable_robotRequest_

typedef ::robotics_cyton::cyton_enable_robotRequest_<std::allocator<void> > cyton_enable_robotRequest;

typedef boost::shared_ptr< ::robotics_cyton::cyton_enable_robotRequest > cyton_enable_robotRequestPtr;
typedef boost::shared_ptr< ::robotics_cyton::cyton_enable_robotRequest const> cyton_enable_robotRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator1> & lhs, const ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator2> & rhs)
{
  return lhs.enable_robot == rhs.enable_robot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator1> & lhs, const ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotics_cyton

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbdd2e9cd62c12dcd05983de0c95bf07";
  }

  static const char* value(const ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbdd2e9cd62c12dcULL;
  static const uint64_t static_value2 = 0xd05983de0c95bf07ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotics_cyton/cyton_enable_robotRequest";
  }

  static const char* value(const ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 enable_robot\n"
"\n"
;
  }

  static const char* value(const ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable_robot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cyton_enable_robotRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotics_cyton::cyton_enable_robotRequest_<ContainerAllocator>& v)
  {
    s << indent << "enable_robot: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enable_robot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTICS_CYTON_MESSAGE_CYTON_ENABLE_ROBOTREQUEST_H
